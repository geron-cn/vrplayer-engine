#include "CameraCursor.h"
#include "GLProgram.h"
#include "Camera.h"
#include "Sprite3D.h"
#include "Stream.h"
#include "Texture.h"

vrlive::Stream* getCursorTextureStream();

namespace vrlive {
    
    CameraCursor* CameraCursor::create(const std::string& imagePath, float width, float height)
    {
        CameraCursor* cursor = new CameraCursor;
        
        if (cursor->init(width, height) == false)
        {
            delete cursor;
            cursor = NULL;
        }
        
        return cursor;
    }
    
    bool CameraCursor::init(float width, float height)
    {
        //left top
        Vector3 lt(-width*0.5f, height*0.5f, 0.f);
        Vector3 lb(-width*0.5f, -height*0.5f, 0.f);
        Vector3 rt(width*0.5f, height*0.5f, 0.f);
        Vector3 rb(width*0.5f, -height*0.5f, 0.f);
        std::vector<float> pos;
        pos.resize(12);
        pos[0] = lt.x;
        pos[1] = lt.y;
        pos[2] = lt.z;
        pos[3] = lb.x;
        pos[4] = lb.y;
        pos[5] = lb.z;
        pos[6] = rt.x;
        pos[7] = rt.y;
        pos[8] = rt.z;
        pos[9] = rb.x;
        pos[10] = rb.y;
        pos[11] = rb.z;
        
        std::vector<float> texCoord;
        texCoord.resize(8);
        texCoord[0]=0;
        texCoord[1]=1;
        texCoord[2]=0;
        texCoord[3]=0;
        texCoord[4]=1;
        texCoord[5]=1;
        texCoord[6]=1;
        texCoord[7]=0;
        
        std::vector<unsigned short> idx;
        idx.resize(6);
        idx[0]=0;
        idx[1]=1;
        idx[2]=2;
        idx[3]=2;
        idx[4]=1;
        idx[5]=3;

        _sprite = Sprite3D::create(pos, texCoord, idx);
        _sprite->setNode(this);
        auto stream = getCursorTextureStream();
        if (stream)
        {
            Texture* textrue = Texture::create(stream);
            _sprite->setTexture(textrue);
            textrue->release();
        }
        
        return true;
    }
    
    CameraCursor::CameraCursor()
    {
    }
    
    CameraCursor::~CameraCursor()
    {
        
    }

    void CameraCursor::draw(Camera* camera)
    {
        auto mat = camera->getInverseViewMatrix();
        
        Vector4 offset(0.f, 0.f, -10.f, 1.f);
        offset = mat * offset;
        mat.m[12] = offset.x;
        mat.m[13] = offset.y;
        mat.m[14] = offset.z;
        
        setTransformMatrix(mat);
        
        _sprite->draw(camera);
    }
}

namespace rc1 {
    /* Variable pngPoint from file data/point.png */
    const int pngPoint_size = 1226;
    const unsigned char pngPoint[1226] =
    {
        0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49,
        0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x08, 0x03,
        0x00, 0x00, 0x00, 0xf4, 0xe0, 0x91, 0xf9, 0x00, 0x00, 0x00, 0xe1, 0x50, 0x4c,
        0x54, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xb6, 0x17, 0xbf, 0x00, 0x00, 0x00,
        0x4b, 0x74, 0x52, 0x4e, 0x53, 0x00, 0x1a, 0x4d, 0x7a, 0xa0, 0xc0, 0xd9, 0xec,
        0xf9, 0xff, 0x0c, 0x54, 0x9c, 0xde, 0x03, 0x4c, 0xab, 0xf6, 0x0e, 0x74, 0xe1,
        0xe0, 0x0b, 0x7b, 0xee, 0x01, 0x5c, 0xe5, 0x22, 0xbd, 0x61, 0xf3, 0x09, 0xe4,
        0x53, 0x33, 0x1b, 0x04, 0x19, 0xca, 0xfe, 0xc5, 0x72, 0x27, 0x26, 0xdf, 0xef,
        0x8b, 0x25, 0x2b, 0xe7, 0xfd, 0x97, 0x13, 0xda, 0x3a, 0xa4, 0x71, 0xf8, 0x4a,
        0x3c, 0x7e, 0xb2, 0xd8, 0xf1, 0x21, 0x8c, 0xe8, 0x18, 0x9b, 0xfb, 0x5e, 0x06,
        0x9d, 0xbb, 0xd0, 0x63, 0x33, 0xd4, 0x00, 0x00, 0x03, 0x4d, 0x49, 0x44, 0x41,
        0x54, 0x78, 0xda, 0xed, 0x5a, 0x69, 0x53, 0xf2, 0x30, 0x10, 0x46, 0xca, 0x55,
        0x40, 0x40, 0x10, 0xca, 0xa5, 0x20, 0x97, 0x1c, 0x5a, 0x50, 0x50, 0x01, 0xb9,
        0x91, 0xf3, 0xff, 0xff, 0x20, 0x67, 0x7c, 0x9b, 0xba, 0x29, 0x85, 0xa6, 0xa1,
        0xb8, 0xf3, 0xce, 0xe4, 0xf9, 0xb8, 0x64, 0xb3, 0x4b, 0x9a, 0xdd, 0x7d, 0x36,
        0x89, 0xcb, 0x25, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0xc0, 0x87, 0x2b, 0xb7, 0xe4, 0xf1, 0xfa, 0xfc, 0x01, 0x59, 0x0e, 0xf8,
        0x7d, 0x5e, 0x8f, 0xe4, 0xbe, 0xfa, 0x43, 0xe3, 0xc1, 0x50, 0xf8, 0x5a, 0x3e,
        0xc0, 0x75, 0x38, 0x14, 0xfc, 0x0b, 0xeb, 0x91, 0x68, 0xec, 0x46, 0x3e, 0x82,
        0x9b, 0x58, 0x34, 0x72, 0x61, 0xf3, 0xf1, 0xc4, 0xad, 0x7c, 0x12, 0xc9, 0x44,
        0xfc, 0x82, 0xe6, 0x53, 0x4a, 0x5a, 0xb6, 0x44, 0x5a, 0x49, 0x5d, 0xc8, 0x7c,
        0x26, 0x9b, 0x93, 0x99, 0x90, 0xcb, 0x66, 0x2e, 0x61, 0x3f, 0x7f, 0x27, 0x33,
        0xe3, 0x2e, 0xef, 0xbc, 0xfd, 0xfb, 0x82, 0x6c, 0x03, 0x85, 0x7b, 0x87, 0xcd,
        0x17, 0x3d, 0x46, 0x13, 0x0f, 0x31, 0xa5, 0x54, 0xae, 0xa4, 0xaa, 0xd5, 0x54,
        0xa5, 0x5c, 0x52, 0x62, 0x0f, 0xc6, 0xdf, 0x3d, 0x45, 0x27, 0xed, 0xd7, 0x1e,
        0xa9, 0xc9, 0xeb, 0x8d, 0x66, 0xcb, 0x38, 0xa4, 0xd5, 0x6c, 0xd4, 0xa9, 0x41,
        0x8f, 0x35, 0xe7, 0xec, 0x3f, 0x3d, 0xc3, 0x99, 0xd5, 0x76, 0xc7, 0x7c, 0x58,
        0xa7, 0xad, 0xc2, 0x71, 0xcf, 0x4f, 0x4e, 0xd9, 0x7f, 0x79, 0x85, 0xe6, 0xa5,
        0x13, 0x81, 0x1e, 0x97, 0xa0, 0x0b, 0xaf, 0x2f, 0x0e, 0xfd, 0x7f, 0x60, 0xbf,
        0xdb, 0x7b, 0x3b, 0x3d, 0xf8, 0xad, 0xd7, 0x05, 0x1e, 0x38, 0xb2, 0x06, 0x35,
        0xb0, 0xfe, 0xef, 0x1f, 0xd6, 0xe3, 0x3f, 0xde, 0xc1, 0x57, 0x70, 0x60, 0x1f,
        0x14, 0xc1, 0xfe, 0xeb, 0x33, 0x55, 0x9b, 0x60, 0x1f, 0xec, 0xc4, 0xf3, 0x63,
        0xe1, 0x37, 0xfe, 0xba, 0x03, 0x56, 0x9d, 0xc1, 0xef, 0x67, 0xf0, 0x9c, 0x9d,
        0x7f, 0xf4, 0xa9, 0x86, 0x25, 0x76, 0xad, 0xd2, 0x50, 0x57, 0x3b, 0x33, 0x23,
        0xe5, 0xf5, 0xfc, 0x37, 0xfc, 0xb4, 0xa3, 0xf7, 0xa9, 0x7b, 0x50, 0x38, 0x2b,
        0x2b, 0x67, 0xf4, 0xfc, 0xdf, 0x2d, 0xd9, 0xd3, 0x2c, 0xe9, 0x5f, 0xe1, 0xee,
        0x9c, 0xca, 0x94, 0xd5, 0x57, 0x72, 0x60, 0x57, 0x75, 0xa0, 0xab, 0x66, 0xcf,
        0xa8, 0xff, 0x7a, 0xfd, 0xed, 0x9b, 0x50, 0xa3, 0xd1, 0x78, 0x32, 0x9d, 0xd5,
        0xeb, 0xb3, 0xe9, 0x64, 0x3c, 0x32, 0x21, 0x42, 0x7a, 0x2c, 0xe4, 0xf8, 0xf9,
        0x81, 0xa2, 0xc7, 0xff, 0x41, 0xfc, 0xcd, 0x17, 0x4b, 0x98, 0x76, 0x97, 0x8b,
        0xf9, 0x41, 0x34, 0xea, 0xf9, 0x40, 0xe1, 0xe6, 0x5f, 0x84, 0xff, 0x74, 0x8d,
        0xf9, 0xe7, 0x6b, 0xb5, 0x36, 0x56, 0xbf, 0xf5, 0xea, 0xcb, 0x98, 0x91, 0xc8,
        0x36, 0x48, 0xf3, 0xb2, 0xb4, 0x04, 0x99, 0xbc, 0x67, 0xf8, 0x61, 0xa3, 0x9a,
        0x71, 0x00, 0x75, 0x63, 0x18, 0xd6, 0x23, 0xbf, 0x24, 0x38, 0xf9, 0x2f, 0xe1,
        0x9f, 0x2a, 0x9d, 0xff, 0xb7, 0xbb, 0x63, 0x34, 0x64, 0xb7, 0xa5, 0xeb, 0x02,
        0xf1, 0xf3, 0x96, 0x8f, 0x2b, 0x47, 0xc9, 0xbc, 0x12, 0xbd, 0x33, 0xf7, 0xc7,
        0x89, 0xd0, 0x9e, 0xde, 0x6f, 0x12, 0x91, 0x47, 0xb9, 0x1c, 0x88, 0x91, 0x05,
        0xa0, 0x3e, 0xe1, 0x76, 0x7f, 0x8a, 0x8a, 0xed, 0xa9, 0x35, 0x88, 0x93, 0x25,
        0x88, 0x71, 0xf5, 0x3f, 0xa4, 0xff, 0x68, 0x53, 0xe2, 0xdd, 0x69, 0x32, 0xb8,
        0xa3, 0x06, 0xb7, 0x49, 0xc7, 0xc2, 0xd3, 0x33, 0x85, 0x08, 0xff, 0xa2, 0xf8,
        0xcf, 0xc6, 0x8a, 0x8e, 0x52, 0x3b, 0xb1, 0x43, 0x58, 0x5a, 0x88, 0xc3, 0x81,
        0xb0, 0xa6, 0xdb, 0xa0, 0xe2, 0x4f, 0xb5, 0x72, 0x40, 0xa5, 0xa2, 0xb1, 0xa1,
        0x49, 0xc3, 0x1c, 0x0e, 0x90, 0xfe, 0xb3, 0x09, 0x85, 0x2b, 0x6b, 0x46, 0xbe,
        0x82, 0xe3, 0x9b, 0xa4, 0x73, 0xe5, 0xe8, 0xbf, 0xc9, 0x84, 0x90, 0xff, 0xce,
        0xd7, 0xd6, 0x0e, 0xac, 0x61, 0x4e, 0x6c, 0x11, 0xa9, 0xfd, 0xee, 0xdd, 0x4d,
        0xf8, 0x3f, 0x14, 0x2e, 0x58, 0x9a, 0x92, 0x05, 0xd4, 0x20, 0xfd, 0x82, 0xdb,
        0xb6, 0x03, 0x92, 0x49, 0x04, 0x45, 0x96, 0x2c, 0x0e, 0x2c, 0x23, 0x26, 0xb1,
        0x2c, 0x71, 0x53, 0x31, 0x58, 0x49, 0x46, 0x6c, 0x7d, 0xd9, 0xc8, 0xa4, 0x9e,
        0xd9, 0xa7, 0x66, 0x5e, 0x4d, 0x13, 0x12, 0x91, 0x31, 0x9b, 0x03, 0x63, 0x48,
        0x4c, 0x34, 0x99, 0xd7, 0xb6, 0x03, 0x3e, 0x4d, 0xb3, 0x0c, 0x64, 0x13, 0x36,
        0x07, 0x26, 0x40, 0xa5, 0xac, 0xc9, 0x7c, 0xb6, 0x1d, 0xf0, 0x6b, 0x9a, 0x15,
        0x20, 0x9b, 0xb2, 0x39, 0x30, 0x05, 0x2a, 0x15, 0x4d, 0xe6, 0xb7, 0xed, 0x40,
        0x40, 0xd3, 0x84, 0xe5, 0x65, 0xc6, 0xe6, 0xc0, 0x0c, 0x96, 0x2e, 0x4d, 0x16,
        0xb0, 0xed, 0x00, 0x99, 0xad, 0x0a, 0x64, 0x75, 0x36, 0x07, 0xea, 0x40, 0xa5,
        0x4a, 0x84, 0xff, 0x9f, 0x03, 0xe8, 0x9f, 0x00, 0x7d, 0x13, 0xa2, 0x87, 0x21,
        0x7a, 0x22, 0x42, 0x4f, 0xc5, 0xe8, 0xc5, 0x08, 0xbd, 0x1c, 0xa3, 0x13, 0x12,
        0x74, 0x4a, 0x86, 0x4f, 0x4a, 0xd1, 0x69, 0x39, 0x7a, 0x63, 0x82, 0xde, 0x9a,
        0xe1, 0x37, 0xa7, 0xce, 0xb5, 0xe7, 0x49, 0xce, 0xab, 0x2c, 0xec, 0x03, 0x0a,
        0xfc, 0x23, 0x1a, 0xf4, 0x43, 0x2a, 0xfc, 0x63, 0x3a, 0xf4, 0x83, 0x4a, 0xfc,
        0xa3, 0x5a, 0xf4, 0xc3, 0x6a, 0xfc, 0xe3, 0x7a, 0xfc, 0x0b, 0x0b, 0xfc, 0x2b,
        0x1b, 0xf4, 0x4b, 0x2b, 0xfc, 0x6b, 0x3b, 0xfc, 0x8b, 0x4b, 0xfc, 0xab, 0x5b,
        0xfc, 0xcb, 0x6b, 0xfc, 0xeb, 0x7b, 0x17, 0xfa, 0x03, 0x06, 0x17, 0xfe, 0x13,
        0x0e, 0xfc, 0x47, 0x2c, 0x2e, 0xf4, 0x67, 0x3c, 0x3f, 0x81, 0x9e, 0x48, 0x62,
        0x3e, 0x64, 0xfa, 0x21, 0x42, 0xb8, 0x4f, 0xb9, 0xfe, 0x55, 0x1b, 0xd4, 0xc7, 
        0x6c, 0x24, 0x35, 0x19, 0x9f, 0xf3, 0xd5, 0x5c, 0x02, 0x02, 0x02, 0x02, 0x02, 
        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x7c, 0xf8, 0x06, 0xbb, 0xcb, 0xbe, 
        0xbb, 0xdc, 0x59, 0xe1, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 
        0xae, 0x42, 0x60, 0x82
    }; /* End of data/point.png */
    
}; /*namespace rc1 */

vrlive::Stream* getCursorTextureStream()
{
    static vrlive::Stream* instance = nullptr;
    if (instance == nullptr)
    {
        unsigned char* buff = new unsigned char[rc1::pngPoint_size];
        memcpy(buff, (unsigned char*)rc1::pngPoint, sizeof(unsigned char) * rc1::pngPoint_size);
        
        instance = vrlive::MemoryStream::create((char*)buff, rc1::pngPoint_size);
    }
    instance->rewind();
    
    return instance;
}

